
读《游戏之旅-我的编程感悟》

这书很多年的前，云风写的，现在看起来还是很有不错的体会。
当然，对于作者很早就听说，我之前一直在做三维开发，涉及游戏不多，如今出入游戏之路，希望能有所收获，看完觉得但是应该更早的来拜读，在做三维开发做个程序员的时候就要学习下。

自己记录一下，就是一路读下来，自己的感悟和记录

画的思维导图也只顾C++相关的，请见谅，多年以后本书依然精彩，值得拜读。

<img src="/images/readgametravel/c++.png" class="fit image">


## 汇编：
第六章汇编优化：讲的太多的汇编，对当前编程意义不大，虽然学过点汇编，但是基本没有用过，对于指令长度的等模糊不清了，这段咩有怎么看懂。
SIMD和MMX根本看不懂，不知有多少用处。对现在电脑硬件设备来说，可能没有太多意义。

## C++
同样，我喜欢C++，就C++与C的区别上，讲的很棒，多态，运行时，标准库，内存动态分配。

多继承的类有同个父类，为避免二义性，可使用虚继承的方法。

BSS段：BSS段（bss segment）通常是指用来存放程序中未初始化的全局变量的一块内存区域。BSS是英文Block Started by Symbol的简称。BSS段属于静态内存分配。

数据段：数据段（data segment）通常是指用来存放程序中已初始化的全局变量的一块内存区域。数据段属于静态内存分配。

代码段：代码段（code segment/text segment）通常是指用来存放程序执行代码的一块内存区域。这部分区域的大小在程序运行前就已经确定，并且内存区域通常属于只读, 某些架构也允许代码段为可写，即允许修改程序。在代码段中，也有可能包含一些只读的常数变量，例如字符串常量等。

堆（heap）：堆是用于存放进程运行中被动态分配的内存段，它的大小并不固定，可动态扩张或缩减。当进程调用malloc等函数分配内存时，新分配的内存就被动态添加到堆上（堆被扩张）；当利用free等函数释放内存时，被释放的内存从堆中被剔除（堆被缩减）

栈(stack)：栈又称堆栈， 是用户存放程序临时创建的局部变量，也就是说我们函数括弧“{}”中定义的变量（但不包括static声明的变量，static意味着在数据段中存放变量）。除此以外，在函数被调用时，其参数也会被压入发起调用的进程栈中，并且待到调用结束后，函数的返回值也会被存放回栈中。由于栈的先进先出特点，所以栈特别方便用来保存/恢复调用现场。从这个意义上讲，我们可以把堆栈看成一个寄存、交换临时数据的内存区。

## 内存碎片
内存碎片 浪费主要在：
额外内存开销，比如：记录内存块大小等。
内存碎片：用户请求一块内存大小时，分配器多分配的额外空间。
外部碎片：释放掉动态分配内存后，卡在中间的不连续内存很难被利用上。
当然，关于内存分配写法，也很有借鉴意义，很多人估计都在用。

## 调试

关于Assert自定义写法


```

	#if _DEBUG
	#define ASSERT(c) if (c) 0;else\
		_myassert(#C,__FILE__,__LINE__)
	#else
	#define ASSERT(c) 0
	#endif
```
关于Assert分级。就是宏定义代码里做判断。

关于#ifdef 这样的技巧，有段时间真的是用的太多了，在引擎里面大面积的使用。当然，给后来继承类的的同学，代码量大大减少了，但是坏处也有就是他们不可以调试那里的代码。看云风建议可以用，降低次数，适度啊。


release版本的中断，在希望断点处写：__asm int 3.

## 失败经验

过多工作在一人身上/

过分弹性的工作

没完没了的变化和返工

没有及时测试

项目主导严重偏向某职位
程序注重技术，然而玩家不在意，只在乎玩。策划随意增加需求，程序盲从勉强实现，代码混乱成为隐患。

## 最后

虽然做游戏时间不长，编程还是有些年头，匆匆看完后，后悔多年前就应该看看，应该不至于走那么些弯路。


知行合一，与君共勉！


